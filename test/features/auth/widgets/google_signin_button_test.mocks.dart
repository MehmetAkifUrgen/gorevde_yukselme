// Mocks generated by Mockito 5.4.6 from annotations
// in gorevde_yukselme/test/features/auth/widgets/google_signin_button_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:firebase_auth/firebase_auth.dart' as _i5;
import 'package:gorevde_yukselme/core/services/auth_service.dart' as _i3;
import 'package:gorevde_yukselme/core/services/firestore_service.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDocumentSnapshot_0<T extends Object?> extends _i1.SmartFake
    implements _i2.DocumentSnapshot<T> {
  _FakeDocumentSnapshot_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i3.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i5.User?> get authStateChanges =>
      (super.noSuchMethod(
            Invocation.getter(#authStateChanges),
            returnValue: _i4.Stream<_i5.User?>.empty(),
          )
          as _i4.Stream<_i5.User?>);

  @override
  bool get isSignedIn =>
      (super.noSuchMethod(Invocation.getter(#isSignedIn), returnValue: false)
          as bool);

  @override
  _i4.Future<_i5.UserCredential?> signInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmailAndPassword, [], {
              #email: email,
              #password: password,
            }),
            returnValue: _i4.Future<_i5.UserCredential?>.value(),
          )
          as _i4.Future<_i5.UserCredential?>);

  @override
  _i4.Future<_i5.UserCredential?> createUserWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createUserWithEmailAndPassword, [], {
              #email: email,
              #password: password,
            }),
            returnValue: _i4.Future<_i5.UserCredential?>.value(),
          )
          as _i4.Future<_i5.UserCredential?>);

  @override
  _i4.Future<_i5.UserCredential?> signInWithGoogle() =>
      (super.noSuchMethod(
            Invocation.method(#signInWithGoogle, []),
            returnValue: _i4.Future<_i5.UserCredential?>.value(),
          )
          as _i4.Future<_i5.UserCredential?>);

  @override
  _i4.Future<void> sendPasswordResetEmail({required String? email}) =>
      (super.noSuchMethod(
            Invocation.method(#sendPasswordResetEmail, [], {#email: email}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateUserProfile({String? displayName, String? photoURL}) =>
      (super.noSuchMethod(
            Invocation.method(#updateUserProfile, [], {
              #displayName: displayName,
              #photoURL: photoURL,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAccount() =>
      (super.noSuchMethod(
            Invocation.method(#deleteAccount, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [FirestoreService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreService extends _i1.Mock implements _i6.FirestoreService {
  MockFirestoreService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> createDocument({
    required String? collection,
    required String? documentId,
    required Map<String, dynamic>? data,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createDocument, [], {
              #collection: collection,
              #documentId: documentId,
              #data: data,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateDocument({
    required String? collection,
    required String? documentId,
    required Map<String, dynamic>? data,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateDocument, [], {
              #collection: collection,
              #documentId: documentId,
              #data: data,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.DocumentSnapshot<Map<String, dynamic>>> getDocument({
    required String? collection,
    required String? documentId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getDocument, [], {
              #collection: collection,
              #documentId: documentId,
            }),
            returnValue:
                _i4.Future<_i2.DocumentSnapshot<Map<String, dynamic>>>.value(
                  _FakeDocumentSnapshot_0<Map<String, dynamic>>(
                    this,
                    Invocation.method(#getDocument, [], {
                      #collection: collection,
                      #documentId: documentId,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i2.DocumentSnapshot<Map<String, dynamic>>>);

  @override
  _i4.Future<void> deleteDocument({
    required String? collection,
    required String? documentId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#deleteDocument, [], {
              #collection: collection,
              #documentId: documentId,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Stream<_i2.QuerySnapshot<Map<String, dynamic>>> getCollectionStream({
    required String? collection,
    _i2.Query<Map<String, dynamic>>? query,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getCollectionStream, [], {
              #collection: collection,
              #query: query,
            }),
            returnValue:
                _i4.Stream<_i2.QuerySnapshot<Map<String, dynamic>>>.empty(),
          )
          as _i4.Stream<_i2.QuerySnapshot<Map<String, dynamic>>>);

  @override
  _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>> getDocumentStream({
    required String? collection,
    required String? documentId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getDocumentStream, [], {
              #collection: collection,
              #documentId: documentId,
            }),
            returnValue:
                _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>>.empty(),
          )
          as _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>>);

  @override
  _i4.Future<void> performBatch(List<Map<String, dynamic>>? operations) =>
      (super.noSuchMethod(
            Invocation.method(#performBatch, [operations]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> createUserProfile({
    required String? userId,
    required Map<String, dynamic>? userData,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createUserProfile, [], {
              #userId: userId,
              #userData: userData,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateUserProfile({
    required String? userId,
    required Map<String, dynamic>? userData,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateUserProfile, [], {
              #userId: userId,
              #userData: userData,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.DocumentSnapshot<Map<String, dynamic>>> getUserProfile({
    required String? userId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getUserProfile, [], {#userId: userId}),
            returnValue:
                _i4.Future<_i2.DocumentSnapshot<Map<String, dynamic>>>.value(
                  _FakeDocumentSnapshot_0<Map<String, dynamic>>(
                    this,
                    Invocation.method(#getUserProfile, [], {#userId: userId}),
                  ),
                ),
          )
          as _i4.Future<_i2.DocumentSnapshot<Map<String, dynamic>>>);

  @override
  _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>> getUserProfileStream({
    required String? userId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getUserProfileStream, [], {#userId: userId}),
            returnValue:
                _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>>.empty(),
          )
          as _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>>);

  @override
  _i4.Future<void> saveUserAnswer({
    required String? userId,
    required String? questionId,
    required Map<String, dynamic>? answerData,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#saveUserAnswer, [], {
              #userId: userId,
              #questionId: questionId,
              #answerData: answerData,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Stream<_i2.QuerySnapshot<Map<String, dynamic>>> getUserAnswersStream({
    required String? userId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getUserAnswersStream, [], {#userId: userId}),
            returnValue:
                _i4.Stream<_i2.QuerySnapshot<Map<String, dynamic>>>.empty(),
          )
          as _i4.Stream<_i2.QuerySnapshot<Map<String, dynamic>>>);

  @override
  _i4.Future<void> savePerformanceData({
    required String? userId,
    required Map<String, dynamic>? performanceData,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#savePerformanceData, [], {
              #userId: userId,
              #performanceData: performanceData,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
